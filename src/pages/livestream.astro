---

// Unnused code, delete as you want

import Layout from "@/layouts/Layout.astro";
import formatDate from "@/utils/formatDate"; 

const API_KEY = import.meta.env.YOUTUBE_API_KEY;
const CHANNEL_ID = import.meta.env.YOUTUBE_CHANNEL_ID;

interface YouTubeVideo {
  id: { videoId: string };
  snippet: {
    title: string;
    thumbnails: { medium: { url: string } };
    publishedAt: string;
  };
  duration?: string; // Tambahkan properti untuk durasi
}

interface YouTubeChannel {
  snippet: {
    title: string;
    description: string;
    thumbnails: {
      [x: string]: any;
      medium: { url: string };
    };
  };
  statistics: {
    subscriberCount: string;
  };
}

interface YouTubeApiResponse {
  items: YouTubeVideo[];
}

interface YouTubeChannelResponse {
  items: YouTubeChannel[];
}

interface YouTubeVideoDetailsResponse {
  items: { id: string; contentDetails: { duration: string } }[];
}

// Fungsi untuk mengonversi durasi dari ISO 8601 ke format yang mudah dibaca
const formatDuration = (isoDuration: string): string => {
  const match = isoDuration.match(/PT(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)S)?/);
  if (!match) return "Unknown";

  const hours = match[1] ? `${match[1]}j ` : "";
  const minutes = match[2] ? `${match[2]}m ` : "";
  const seconds = match[3] ? `${match[3]}d` : "";

  return `${hours}${minutes}${seconds}`.trim();
};

// Fetch data dari YouTube API untuk video
const fetchVideos = async (): Promise<YouTubeVideo[]> => {
  try {
    const searchUrl = new URL("https://www.googleapis.com/youtube/v3/search");
    searchUrl.searchParams.set("key", API_KEY);
    searchUrl.searchParams.set("channelId", CHANNEL_ID);
    searchUrl.searchParams.set("part", "snippet");
    searchUrl.searchParams.set("type", "video");
    searchUrl.searchParams.set("eventType", "completed");
    searchUrl.searchParams.set("maxResults", "100");
    searchUrl.searchParams.set("order", "date");

    const searchRes = await fetch(searchUrl.toString());
    if (!searchRes.ok) {
      throw new Error(`HTTP error! Status: ${searchRes.status}`);
    }

    const searchData: YouTubeApiResponse = await searchRes.json();
    const videoIds = searchData.items.map(video => video.id.videoId).join(",");
    if (!videoIds) return [];

    // Fetch detail video untuk mendapatkan durasi
    const videoUrl = new URL("https://www.googleapis.com/youtube/v3/videos");
    videoUrl.searchParams.set("key", API_KEY);
    videoUrl.searchParams.set("id", videoIds);
    videoUrl.searchParams.set("part", "contentDetails");

    const videoRes = await fetch(videoUrl.toString());
    if (!videoRes.ok) {
      throw new Error(`HTTP error! Status: ${videoRes.status}`);
    }

    const videoData: YouTubeVideoDetailsResponse = await videoRes.json();

    // Gabungkan data durasi ke data video
    return searchData.items.map(video => {
      const videoDetail = videoData.items.find(v => v.id === video.id.videoId);
      return {
        ...video,
        duration: videoDetail ? formatDuration(videoDetail.contentDetails.duration) : "Unknown",
      };
    });
  } catch (error) {
    console.error("Gagal mengambil data YouTube:", error);
    return [];
  }
};

// Fetch data dari YouTube API untuk channel
const fetchChannel = async (): Promise<YouTubeChannel | null> => {
  try {
    const url = new URL('https://www.googleapis.com/youtube/v3/channels');
    url.searchParams.set('key', API_KEY);
    url.searchParams.set('id', CHANNEL_ID);
    url.searchParams.set('part', 'snippet,statistics');

    const res = await fetch(url.toString());
    if (!res.ok) {
      throw new Error(`HTTP error! Status: ${res.status}`);
    }

    const data: YouTubeChannelResponse = await res.json();
    return data.items.length > 0 ? data.items[0] : null;
  } catch (error) {
    console.error("Gagal mengambil data channel YouTube:", error);
    return null;
  }
};

let allVideos: YouTubeVideo[] = [];
let channelInfo: YouTubeChannel | null = null;

allVideos = await fetchVideos();
channelInfo = await fetchChannel();

allVideos = allVideos.sort((a, b) => {
  const dateA = new Date(a.snippet.publishedAt).getTime();
  const dateB = new Date(b.snippet.publishedAt).getTime();
  return dateB - dateA;
});

---
<style>
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .animate-fade-in-up {
    animation: fadeInUp 0.8s ease-out forwards;
  }
  </style>
  
  
  <Layout title="Live Stream Log">
  <main class="flex flex-col items-center justify-center min-h-screen px-4 py-8 opacity-0 translate-y-4 animate-fade-in-up">
    {channelInfo ? (
      <a href={`https://www.youtube.com/channel/${CHANNEL_ID}`} target="_blank" class="w-full max-w-4xl p-6 bg-white dark:bg-neutral-800 rounded-lg shadow-md mb-8">
        <div class="flex items-center gap-4">
          {/* Menampilkan gambar profil channel */}
          <img
            src={channelInfo.snippet.thumbnails.high?.url || 'https://avatars.githubusercontent.com/u/104496391'}  
            alt={channelInfo.snippet.title}
            class="w-24 h-24 rounded-full object-cover"
          />
          <div class="flex flex-col">
            <h2 class="text-2xl font-semibold text-text-light dark:text-neutral-100">
              {channelInfo.snippet.title}
            </h2>
            <p class="text-sm text-neutral-500 dark:text-neutral-400">
              {channelInfo.snippet.description.slice(0, 150)}...
            </p>
            <p class="text-sm text-neutral-600 dark:text-neutral-300">
              {channelInfo.statistics.subscriberCount} Subscribers
            </p>
          </div>
        </div>
      </a>
    ) : (
      <p class="text-neutral-500 dark:text-neutral-400">Gagal mengambil data channel.</p>
    )}
    
    <h1 class="text-3xl font-bold text-text-light dark:text-neutral-100 mb-6 flex items-center gap-3">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 20 20" class="text-accent-light dark:text-accent-dark">
        <path fill="currentColor" d="M5.453 4.167a.726.726 0 0 0-1.027-.01A8.23 8.23 0 0 0 2 10a8.23 8.23 0 0 0 2.604 6.015a.725.725 0 0 0 1.01-.025c.316-.316.277-.819-.027-1.11A6.73 6.73 0 0 1 3.5 10c0-1.846.741-3.52 1.943-4.738c.29-.295.32-.785.01-1.095M7.214 5.93a.714.714 0 0 0-1.008-.016A5.73 5.73 0 0 0 4.5 10c0 1.692.73 3.213 1.893 4.265a.713.713 0 0 0 .983-.038c.328-.328.267-.844-.041-1.134A4.24 4.24 0 0 1 6 10c0-1.15.457-2.194 1.2-2.96c.286-.294.333-.793.014-1.111m5.572 0a.714.714 0 0 1 1.008-.016A5.73 5.73 0 0 1 15.5 10c0 1.692-.73 3.213-1.893 4.265a.713.713 0 0 1-.983-.038c-.328-.328-.267-.844.041-1.134A4.24 4.24 0 0 0 14 10c0-1.15-.457-2.194-1.2-2.96c-.286-.294-.333-.793-.014-1.111m1.761-1.762a.726.726 0 0 1 1.027-.01A8.23 8.23 0 0 1 18 10a8.23 8.23 0 0 1-2.604 6.015a.725.725 0 0 1-1.01-.025c-.316-.316-.277-.819.028-1.11A6.73 6.73 0 0 0 16.5 10c0-1.846-.741-3.52-1.943-4.738c-.29-.295-.32-.785-.01-1.095M10 8.5a1.5 1.5 0 1 0 0 3a1.5 1.5 0 0 0 0-3"/>
      </svg>
      <span>Live Stream Log</span>
    </h1>

      {/* Daftar Video */}
      {allVideos.length > 0 ? (
      <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6 w-full max-w-6xl">
        {allVideos.map((video, index) => (
          <a
            href={`https://www.youtube.com/watch?v=${video.id.videoId}`}
            target="_blank"
            class={`group relative block rounded-lg overflow-hidden shadow-md hover:shadow-lg transition-all duration-300 hover:scale-105 opacity-0 translate-y-4 animate-fade-in-up`}
            style={`animation-delay: ${index * 0.1}s;`} 
          >


        <div class="relative w-full aspect-video">
          {/* Thumbnail Video */}
          <img
            src={video.snippet.thumbnails.medium.url}
            alt={video.snippet.title}
            class="w-full h-full object-cover"
          />
          {/* Durasi di atas thumbnail */}
          <span class="absolute bottom-2 right-2 bg-black bg-opacity-80 text-white text-xs font-semibold px-2 py-1 rounded">
            {video.duration ?? "--:--"}
          </span>
        </div>
        <div class="p-3 flex gap-3">
          {/* Foto Profil Diganti dengan Lingkaran Merah */}
          <div class="flex-shrink-0 w-10 h-10 bg-red-600 rounded-full"></div>
          <div class="flex flex-col">
            <h3 class="text-sm font-semibold text-gray-900 dark:text-white group-hover:text-red-500">
              {video.snippet.title}
            </h3>
            <p class="text-xs text-gray-500 dark:text-gray-400">
              {formatDate(video.snippet.publishedAt)}
            </p>
          </div>
        </div>
      </a>
    ))}
  </div>
) : (
  <p class="text-neutral-500 dark:text-neutral-400">Belum ada live stream terbaru.</p>
)}
  </main>
</Layout>
